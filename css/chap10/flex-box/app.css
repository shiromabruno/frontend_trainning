body {
    font-family: 'Open Sans', sans-serif;
}
h1 {
    text-align: center;
}
#container {
    background-color: #003049;
    width: 90%;
    height: 500px; /* trocar para fazer varios testes*/
    margin: 0 auto;
    border: 5px solid #003049;
    display: flex;

    /* 
    
    Se main axis eh da esquerda pra direita, entao o cross eh de cima pra baixo
    Se main axis eh de cima pra baixo, entao o cross eh da esquerda pra direita

    */

    /* MAIN AXIS - definir como eh o main axis*/
    /*flex-direction: row; /* padrao eh esse, vem setado, primeiro quadrado eh verde e ultimo azul. Comeca do lado esquerdo*/
    /*flex-direction: row-reverse; /* Comecando do lado direito do container, e comeca (inicia) pelo mesmo: verde ao azul*/
    flex-direction: column; /* em coluna, de cima pra baixo (verde ao azul). COmecando de cima do container*/
    /*flex-direction: column-reverse; /* em coluna, de baixo pra cima (azul pro verde). Comecandode baixo do container*/
        /* OS DIVS FICARAM TAMANHO 200X100 AO INVES DE 200X200. A RESPOSTA EH PQ O HEIGHT DO CONTAINER EH 500PX, LOGO, CADA DIV SO PODERIA TER 100 (X5 = 500PX)*/
    
    /* Como eh distribuido no MAIN AXIS*/
    /*justify-content: flex-start; /* fala que inicia da esquerda pra direita (flex-direction: row) ou de cima pra baixo (flex-direction:column) o*/
    justify-content: center; /* tudo fica direcionado para o meio; Tanto pra ROW quanto em COLUMN [em column fica grudado na esquerda] */
    /*justify-content: space-between; /* deixa espacado certinho dentro do container, ocupa todo espaco da linha/coluna. O primeiro elemento gruda na esquerda (se for row) ou em cima (se for column)*/
    /*justify-content: space-around;  /* mesmo espaco na direita e esquerda (row) em cima e embaixo (column). Primeiro elemento Nao gruda na esquerda ou em cima. Nao sobrepoe direita esquerda ou cima baixo, ou seja o espacamento fica irregular nas beiradas*/
    /*justify-content: space-evenly; /* Sobrepoe direita esquerda ou cima baixo, ou seja o espacamento fica regular em todas as direcoes */

    /* Como eh distribuido no CROSS AXIS, quando tem multiplas linhas ou colunas. Pode tirar os espacos entre essas linhas e colunas */
    /*align-content: center; /* retira os spaces e deixa tudo no centro */
    /*align-content: flex-start; /* retira os spaces e deixa na esquerda se CROSS = esquerda para direita. */
    /*align-content: flex-end; /* retira os spaces e deixa na direita se CROSS = esquerda para direita. */
    /*align-content: space-between; /* usa as "pontas" do container e aproveita todo o espaco. */
    /*align-content: space-around; /* mesmo espaco entre os items (porem nas pontas fica menor) e aproveita o espaco todo. */
    /*align-content: space-evenly; /* deixa o espaco igual entre os itens e tbm nas pontas */

    /* DETERMINA COMO os elementos irao WRAP no MAIN AXIS. Se nova coluna ou nova linha*/
    /* se vc dimimuir a janela do navegador, os itens vao se readequando ou ficando menor.o FLEX-WRAP NAO DEIXA MAIS, ELE COLOCA restante dos quadrados na outra linha ou coluna (dependendo se for ROW ou COLUMN o flex-direction) */
    /* mesmo se o container for menor por padrao, os divs sao quebrados em outras linhas/colunas*/
    flex-wrap: wrap; /*  pode combinar com flex-direction e justify-content*/
    /*flex-wrap: wrap-reverse; /*  o wrap ocorre de forma INVERTIDO/ESPELHO. Numa ROW ao invez de descer o elemento extra, ele sobe*/
    
    /* COMO DISTRIBUI SPACE OU ITEMS NO CROSS AXIS, ou seja , depende como esta no MAIX AXIS*/
    /*align-items: flex-start; /* Padrao  Num flex-direction: row, ele comeca na primeira linha. No column, seria na primeira coluna */
    align-items: flex-end; /* Num flex-direction row, a linha fica na linha N. Na flex-direction column, a coluna sai do 1 e fica no N*/
    /*align-items: center; /* Imagina uma linha passando no meio dos divs. deixa no centro, baseado no centro do elemento */
    /*align-items: baseline; /* Imagina uma linha passando no meio das letras. O alinhamento se da pelas letras e nao mais pelo centro (caso acima). Se as letras tiverem diferentes tamanhos, os DIVS nao ficarao bem alinhados, porem as letras irao*/
    /*align-self: center; altera somente pra 1, precisa estar separado, tipo num div:nth-of-type(3) */
}

#container div{ /* se nao tivesse colocando width e height, os divs nao apareceriam.*/
    width: 200px;
    height: 200px;
    /*display: inline-block;  /* -- funcionou, ficou 'igual' ao flex- entre aspas. Inline-block deixou as margin entre os quadrados coloridos-" */
   font-size: 4em; 
}

/*
div:nth-of-type(3){
    /* COMO DISTRIBUI SPACE OU ITEMS NO CROSS AXIS, porem altera somente 1 item 
    align-self: center;
}

div:nth-of-type(2){
    /* COMO DISTRIBUI SPACE OU ITEMS NO CROSS AXIS, porem altera somente 1 item 
    align-self: flex-end;
}
*/

div:nth-of-type(5){
    /* COMO DISTRIBUI SPACE OU ITEMS NO CROSS AXIS, porem altera somente 1 item */
    /* No exemplo com o COLUMN, justfiy content center, wrap e align itens flex-end, o 5 quadrado fica junto do quadrado do meio, pois tira o espaco entre o meio e o ultimo quadrado. O espaco reservado do quadrado 5 eh tipo 30% do container itnteiro, por isso o 'start' dele eh junto do quadrado do meio*/
    align-self: flex-start;
}